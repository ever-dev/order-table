import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../index";
import { fetchOrders } from "./ordersAPI";
import { Order } from "../../types/order";

export interface CounterState {
  orders: Order[] | null;
  isLoading: boolean;
}

const initialState: CounterState = {
  orders: null,
  isLoading: false,
};

export const fetchOrdersAction = createAsyncThunk(
  "orders/fetchOrders",
  async () => {
    const response = await fetchOrders();
    return response;
  }
);

export const ordersSlice = createSlice({
  name: "orders",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchOrdersAction.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchOrdersAction.fulfilled, (state, action) => {
        state.isLoading = false;
        state.orders = action.payload.map((item) => new Order(item));
      });
  },
});

export const selectOrders = (state: RootState) => state.orders.orders;
export const selectIsOrdersLoading = (state: RootState) =>
  state.orders.isLoading;

export default ordersSlice.reducer;
